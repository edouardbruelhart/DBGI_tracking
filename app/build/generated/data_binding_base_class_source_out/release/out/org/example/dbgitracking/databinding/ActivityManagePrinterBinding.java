// Generated by view binder compiler. Do not edit!
package org.example.dbgitracking.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ListView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.example.dbgitracking.R;

public final class ActivityManagePrinterBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView choosePrinter;

  @NonNull
  public final TextView infoPrinter;

  @NonNull
  public final ListView printerListView;

  @NonNull
  public final TextView printerNameTextView;

  private ActivityManagePrinterBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView choosePrinter, @NonNull TextView infoPrinter,
      @NonNull ListView printerListView, @NonNull TextView printerNameTextView) {
    this.rootView = rootView;
    this.choosePrinter = choosePrinter;
    this.infoPrinter = infoPrinter;
    this.printerListView = printerListView;
    this.printerNameTextView = printerNameTextView;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityManagePrinterBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityManagePrinterBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_manage_printer, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityManagePrinterBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.choosePrinter;
      TextView choosePrinter = ViewBindings.findChildViewById(rootView, id);
      if (choosePrinter == null) {
        break missingId;
      }

      id = R.id.infoPrinter;
      TextView infoPrinter = ViewBindings.findChildViewById(rootView, id);
      if (infoPrinter == null) {
        break missingId;
      }

      id = R.id.printerListView;
      ListView printerListView = ViewBindings.findChildViewById(rootView, id);
      if (printerListView == null) {
        break missingId;
      }

      id = R.id.printerNameTextView;
      TextView printerNameTextView = ViewBindings.findChildViewById(rootView, id);
      if (printerNameTextView == null) {
        break missingId;
      }

      return new ActivityManagePrinterBinding((ConstraintLayout) rootView, choosePrinter,
          infoPrinter, printerListView, printerNameTextView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
